plugins {
    id 'nebula.lint' version '16.9.1'
}

allprojects {
    repositories {
        jcenter()
    }

    apply plugin: 'java-library'
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: 'nebula.lint'
    apply plugin: 'maven'

    group 'no.unit.nva'
    version '1.0-SNAPSHOT'

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11


    gradleLint.rules = ['unused-dependency']

    dependencies {
        def junit5Version = '5.6.0'
        testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junit5Version
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junit5Version
        testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junit5Version
    }

    test {
        useJUnitPlatform()
        failFast = true
        testLogging {
            events = ['skipped', 'passed', 'failed']
        }
        finalizedBy jacocoTestReport
    }

    jacocoTestReport {
        reports {
            xml.enabled true
        }
    }

    pmd {
        ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/ruleset.xml')
        ruleSets = []
        ignoreFailures = false
    }

    checkstyle {
        configFile = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml').asFile()
        showViolations = true
    }

    tasks.withType(Checkstyle) {
        exclude '**/org/datacite/schema/**'
    }

    tasks.withType(Checkstyle) {
        reports {
            xml.enabled false
            html.enabled true
            html.stylesheet rootProject.resources.text.fromFile('config/checkstyle/checkstyle-simple.xsl')
        }
    }

    check.dependsOn(jacocoTestCoverageVerification)
    jacocoTestCoverageVerification.dependsOn(jacocoTestReport)

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                excludes = ['**datacite**']
                limit {
                    counter = 'METHOD'
                    value = 'COVEREDRATIO'
                    minimum = 1.00
                }
            }

            rule {
                excludes = ['**datacite**']
                limit {
                    counter = 'CLASS'
                    value = 'COVEREDRATIO'
                    minimum = 1.00
                }
            }
        }
    }
}

dependencies {
    compile project(':datacite-data')
    implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.0'
    implementation group: 'jakarta.xml.bind', name: 'jakarta.xml.bind-api', version: '2.3.2'
    runtimeOnly group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: '2.3.2'
}

jar {
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

jar.dependsOn(":datacite-data:build")

wrapper {
    gradleVersion = "6.3"
    distributionType = Wrapper.DistributionType.ALL
}