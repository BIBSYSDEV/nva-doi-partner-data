plugins {
    id 'nebula.lint' version '18.1.0'
}

allprojects {
    repositories {
        mavenCentral()
        maven { url "https://jitpack.io" }
    }

    apply plugin: 'maven-publish'
    apply plugin: 'java-library'
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: 'nebula.lint'

    group 'no.unit.nva'
    version '0.5.3'

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11


    gradleLint.rules = ['unused-dependency']

    def junit5Version = '5.9.3'

    dependencies {
        testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junit5Version
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junit5Version
        testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junit5Version
    }

    test {
        useJUnitPlatform()
        failFast = true
        testLogging {
            events = ['skipped', 'passed', 'failed']
        }
        finalizedBy jacocoTestReport
    }

    jacocoTestReport {
        reports {
            xml.required = true
        }
    }

    pmd {
        ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/ruleset.xml')
        ruleSets = []
        ignoreFailures = false
    }

    tasks.withType(Pmd) {
        exclude '**/org/datacite/schema/**'
    }

    checkstyle {
        configFile = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml').asFile()
        showViolations = true
    }

    tasks.withType(Checkstyle) {
        exclude '**/org/datacite/schema/**'
    }

    tasks.withType(Checkstyle) {
        reports {
            xml.required = false
            html.required = true
            html.stylesheet rootProject.resources.text.fromFile('config/checkstyle/checkstyle-simple.xsl')
        }
    }

    check.dependsOn(jacocoTestCoverageVerification)
    jacocoTestCoverageVerification.dependsOn(jacocoTestReport)

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                excludes = ['**datacite**']
                limit {
                    counter = 'METHOD'
                    value = 'COVEREDRATIO'
                    minimum = 1.00
                }
            }

            rule {
                excludes = ['**datacite**']
                limit {
                    counter = 'CLASS'
                    value = 'COVEREDRATIO'
                    minimum = 1.00
                }
            }
        }
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
            }
        }
    }
}